// Core data structures for interacting with the Discord API
// Only portions relevant to sending and receiving messages are modeled

#ifndef WOOL_HPP
#define WOOL_HPP

#include <string>
#include <vector>
#include <optional>
#include <cstdint>

namespace Wool {
// Snowflake is Discord's unsigned 64-bit identifier


using Snowflake = unsigned long long;

struct User { Snowflake id; };
struct Channel { Snowflake id; };
struct Attachment {};
struct Embed {};
struct Reaction {};
// Activity types used for the rich presence activity field

struct ChannelMention {};
enum class MessageActivityType {
    JOIN = 1,
    SPECTATE = 2,
    LISTEN = 3,
    JOIN_REQUEST = 5
};
// Data describing message rich presence activities


struct MessageActivity {
    MessageActivityType type;
    std::optional<std::string> party_id;
};
struct Application {};
// Reference to another message when crossposting or replying

struct MessageReference {
    std::optional<int> type;
    std::optional<Snowflake> message_id;
    std::optional<Snowflake> channel_id;
    std::optional<Snowflake> guild_id;
    std::optional<bool> fail_if_not_exists;
};
struct MessageSnapshot {};
struct MessageInteractionMetadata {};
struct MessageInteraction {};
struct MessageComponent {};
struct MessageStickerItem {};
struct Sticker {};
struct RoleSubscriptionData {};
struct ResolvedData {};
struct Poll {};
struct MessageCall {};
// High level classification of message types


enum class MessageType {
    DEFAULT = 0,
    RECIPIENT_ADD = 1,
    RECIPIENT_REMOVE = 2,
    CALL = 3,
    CHANNEL_NAME_CHANGE = 4,
    CHANNEL_ICON_CHANGE = 5,
    CHANNEL_PINNED_MESSAGE = 6,
    USER_JOIN = 7,
    GUILD_BOOST = 8,
    GUILD_BOOST_TIER_1 = 9,
    GUILD_BOOST_TIER_2 = 10,
    GUILD_BOOST_TIER_3 = 11,
    CHANNEL_FOLLOW_ADD = 12,
    GUILD_DISCOVERY_DISQUALIFIED = 14,
    GUILD_DISCOVERY_REQUALIFIED = 15,
    GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING = 16,
    GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING = 17,
    THREAD_CREATED = 18,
    REPLY = 19,
    CHAT_INPUT_COMMAND = 20,
    THREAD_STARTER_MESSAGE = 21,
    GUILD_INVITE_REMINDER = 22,
    CONTEXT_MENU_COMMAND = 23,
    AUTO_MODERATION_ACTION = 24,
    ROLE_SUBSCRIPTION_PURCHASE = 25,
    INTERACTION_PREMIUM_UPSELL = 26,
    STAGE_START = 27,
    STAGE_END = 28,
    STAGE_SPEAKER = 29,
    STAGE_TOPIC = 31,
    GUILD_APPLICATION_PREMIUM_SUBSCRIPTION = 32,
    GUILD_INCIDENT_ALERT_MODE_ENABLED = 36,
    GUILD_INCIDENT_ALERT_MODE_DISABLED = 37,
    GUILD_INCIDENT_REPORT_RAID = 38,
    GUILD_INCIDENT_REPORT_FALSE_ALARM = 39,
    PURCHASE_NOTIFICATION = 44,
    POLL_RESULT = 46
};
// Bit flags controlling message display and behavior


enum MessageFlags {
    CROSSPOSTED = 1 << 0,
    IS_CROSSPOST = 1 << 1,
    SUPPRESS_EMBEDS = 1 << 2,
    SOURCE_MESSAGE_DELETED = 1 << 3,
    URGENT = 1 << 4,
    HAS_THREAD = 1 << 5,
    EPHEMERAL = 1 << 6,
    LOADING = 1 << 7,
    FAILED_TO_MENTION_SOME_ROLES_IN_THREAD = 1 << 8,
    SUPPRESS_NOTIFICATIONS = 1 << 12,
    IS_VOICE_MESSAGE = 1 << 13,
    HAS_SNAPSHOT = 1 << 14,
    IS_COMPONENTS_V2 = 1 << 15
};

class Message {
public:
    // Message Object fields
    Snowflake id;                            // id of the message
    Snowflake channel_id;                    // id of the channel the message was sent in
    User author;                             // the author of this message
    std::string content;                     // contents of the message
    std::string timestamp;                   // when this message was sent
    std::optional<std::string> edited_timestamp; // when this message was edited
    bool tts = false;                        // whether this was a TTS message
    bool mention_everyone = false;           // whether this message mentions everyone
    std::vector<User> mentions;              // users mentioned in the message
    std::vector<Snowflake> mention_roles;    // roles mentioned in this message
    std::vector<ChannelMention> mention_channels; // channels mentioned in this message
    std::vector<Attachment> attachments;     // attached files
    std::vector<Embed> embeds;               // embedded content
    std::vector<Reaction> reactions;         // reactions to the message
    std::optional<std::string> nonce;        // used for validating a message was sent
    bool pinned = false;                     // whether this message is pinned
    std::optional<Snowflake> webhook_id;     // webhook id if generated by a webhook
    MessageType type = MessageType::DEFAULT; // type of message
    std::optional<MessageActivity> activity; // rich presence-related activity
    std::optional<Application> application;  // application for rich presence embeds
    std::optional<Snowflake> application_id; // application id for interactions
    std::optional<int> flags;                // message flags bitfield
    std::optional<MessageReference> message_reference; // crosspost or reply data
    std::vector<MessageSnapshot> message_snapshots;    // associated message snapshots
    std::optional<Message*> referenced_message;        // the message being replied to
    std::optional<MessageInteractionMetadata> interaction_metadata; // interaction metadata
    std::optional<MessageInteraction> interaction;     // deprecated interaction data
    std::optional<Channel> thread;          // thread started from this message
    std::vector<MessageComponent> components;    // message components
    std::vector<MessageStickerItem> sticker_items; // stickers sent with the message
    std::vector<Sticker> stickers;          // deprecated stickers field
    std::optional<int> position;            // approximate position in a thread
    std::optional<RoleSubscriptionData> role_subscription_data; // role subscription info
    std::optional<ResolvedData> resolved;   // resolved data for auto-populated select menus
    std::optional<Poll> poll;               // poll object
    std::optional<MessageCall> call;        // message call

    // REST API endpoints
    // Convenience wrappers around Discord's message REST endpoints

    static std::vector<Message> GetChannelMessages(Snowflake channel_id);
    static Message GetChannelMessage(Snowflake channel_id, Snowflake message_id);
    static Message CreateMessage(Snowflake channel_id, const Message& msg);
    static Message CrosspostMessage(Snowflake channel_id, Snowflake message_id);
    void CreateReaction(const std::string& emoji);
    void DeleteOwnReaction(const std::string& emoji);
    void DeleteUserReaction(const std::string& emoji, Snowflake user_id);
    std::vector<User> GetReactions(const std::string& emoji);
    void DeleteAllReactions();
    void DeleteAllReactionsForEmoji(const std::string& emoji);
    void EditMessage(const Message& msg);
    void DeleteMessage();
    static void BulkDeleteMessages(Snowflake channel_id, const std::vector<Snowflake>& ids);
};

class Wool {
};

} // namespace Wool

#endif // WOOL_HPP
